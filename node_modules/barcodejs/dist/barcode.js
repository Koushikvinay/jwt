(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.barcodejs = global.barcodejs || {})));
}(this, (function (exports) { 'use strict';

var WIDE_BAR = "W";
var NARROW_BAR = "N";
var WIDE_SPACE = "w";
var NARROW_SPACE = "n";

// See https://en.wikipedia.org/wiki/Code_39
var Mapping = {};
var BaseMapping = {};
var Bars = [[
// 1
WIDE_BAR, NARROW_BAR, NARROW_BAR, NARROW_BAR, WIDE_BAR], [
// 2
NARROW_BAR, WIDE_BAR, NARROW_BAR, NARROW_BAR, WIDE_BAR], [
// 3
WIDE_BAR, WIDE_BAR, NARROW_BAR, NARROW_BAR, NARROW_BAR], [
// 4
NARROW_BAR, NARROW_BAR, WIDE_BAR, NARROW_BAR, WIDE_BAR], [
// 5
WIDE_BAR, NARROW_BAR, WIDE_BAR, NARROW_BAR, NARROW_BAR], [
// 6
NARROW_BAR, WIDE_BAR, WIDE_BAR, NARROW_BAR, NARROW_BAR], [
// 7
NARROW_BAR, NARROW_BAR, NARROW_BAR, WIDE_BAR, WIDE_BAR], [
// 8
WIDE_BAR, NARROW_BAR, NARROW_BAR, WIDE_BAR, NARROW_BAR], [
// 9
NARROW_BAR, WIDE_BAR, NARROW_BAR, WIDE_BAR, NARROW_BAR], [
// 10
NARROW_BAR, NARROW_BAR, WIDE_BAR, WIDE_BAR, NARROW_BAR]];
var Spaces = [[
// +0
NARROW_SPACE, WIDE_SPACE, NARROW_SPACE, NARROW_SPACE], [
// +10
NARROW_SPACE, NARROW_SPACE, WIDE_SPACE, NARROW_SPACE], [
// +20
NARROW_SPACE, NARROW_SPACE, NARROW_SPACE, WIDE_SPACE], [
// +30
WIDE_SPACE, NARROW_SPACE, NARROW_SPACE, NARROW_SPACE]];

function populate() {
	// Numbers
	for (var i = 1; i <= 9; i++) {
		BaseMapping[i.toString()] = [i - 1, 0];
	}
	BaseMapping["0"] = [9, 0];

	// A-J
	for (var _i = "A".charCodeAt(0); _i <= "J".charCodeAt(0); _i++) {
		BaseMapping[String.fromCharCode(_i)] = [_i - "A".charCodeAt(0), 1];
	}
	// K-T
	for (var _i2 = "K".charCodeAt(0); _i2 <= "T".charCodeAt(0); _i2++) {
		BaseMapping[String.fromCharCode(_i2)] = [_i2 - "K".charCodeAt(0), 2];
	}
	// U-Z
	for (var _i3 = "U".charCodeAt(0); _i3 <= "Z".charCodeAt(0); _i3++) {
		BaseMapping[String.fromCharCode(_i3)] = [_i3 - "U".charCodeAt(0), 3];
	}

	BaseMapping["-"] = [6, 3];
	BaseMapping["."] = [7, 3];
	BaseMapping[" "] = [8, 3];
	BaseMapping["*"] = [9, 3];
}

function map() {
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = Object.keys(BaseMapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var key = _step.value;

			var bar = BaseMapping[key][0];
			var space = BaseMapping[key][1];

			var reduction = [];

			for (var i = 0; i < Spaces[space].length; i++) {
				reduction.push(Bars[bar][i]);
				reduction.push(Spaces[space][i]);
			}
			reduction.push(Bars[bar][Bars[bar].length - 1]);

			Mapping[key] = reduction.join("");
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}
}

populate();
map();

Mapping["+"] = [NARROW_BAR, WIDE_SPACE, NARROW_BAR, NARROW_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR].join("");

Mapping["/"] = [NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, NARROW_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR].join("");

Mapping["$"] = [NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, NARROW_SPACE, NARROW_BAR].join("");

Mapping["%"] = [NARROW_BAR, NARROW_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR, WIDE_SPACE, NARROW_BAR].join("");

function encodeCode39(text) {
	var fallbackChar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "-";

	if (!Mapping.hasOwnProperty(fallbackChar)) {
		fallbackChar = "-";
	}

	return Mapping["*"] + NARROW_SPACE + text.toUpperCase().split("").map(function (it) {
		return Mapping[it] ? Mapping[it] : Mapping[fallbackChar];
	}).map(function (it) {
		return it + NARROW_SPACE;
	}).join("") + Mapping["*"];
}

function renderBarcodeToHTML(input) {
	var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "bcjs";

	var html = "";

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var char = _step.value;

			switch (char) {
				case NARROW_SPACE:
					html += "<i class=\"" + prefix + "-narrow " + prefix + "-space\"></i>";
					break;
				case WIDE_SPACE:
					html += "<i class=\"" + prefix + "-wide " + prefix + "-space\"></i>";
					break;
				case NARROW_BAR:
					html += "<i class=\"" + prefix + "-narrow " + prefix + "-bar\"></i>";
					break;
				case WIDE_BAR:
					html += "<i class=\"" + prefix + "-wide " + prefix + "-bar\"></i>";
					break;
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return html;
}

function generateCSS() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    _ref$height = _ref.height,
	    height = _ref$height === undefined ? 100 : _ref$height,
	    _ref$baseWidth = _ref.baseWidth,
	    baseWidth = _ref$baseWidth === undefined ? 5 : _ref$baseWidth,
	    _ref$prefix = _ref.prefix,
	    prefix = _ref$prefix === undefined ? "bcjs" : _ref$prefix;

	return "\n\t\t." + prefix + "-bar, ." + prefix + "-space {\n            height: " + height + "px;\n            display: inline-block;\n        }\n\n        ." + prefix + "-narrow {\n            width: " + baseWidth + "px;\n        }\n\n        ." + prefix + "-wide {\n            width: " + baseWidth * 3 + "px;\n        }\n\n        ." + prefix + "-bar {\n            background-color: black;\n        }\n\n        ." + prefix + "-space {\n            background-color: white;\n        }\n\t";
}

var NARROW_WIDTH = 1;
var WIDE_WIDTH = 3;

function rect(x, wide, filled) {
	return "<rect x=\"" + x + "\" y=\"0\" width=\"" + (wide ? WIDE_WIDTH : NARROW_WIDTH) + "\" height=\"1\" fill=\"" + (filled ? "black" : "white") + "\"/>";
}

function renderBarcodeToSVG(input) {
	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    width = _ref.width,
	    height = _ref.height;

	var svg = "";
	var x = 0;

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var char = _step.value;

			switch (char) {
				case NARROW_SPACE:
					svg += rect(x, false, false);
					x += NARROW_WIDTH;
					break;
				case WIDE_SPACE:
					svg += rect(x, true, false);
					x += WIDE_WIDTH;
					break;
				case NARROW_BAR:
					svg += rect(x, false, true);
					x += NARROW_WIDTH;
					break;
				case WIDE_BAR:
					svg += rect(x, true, true);
					x += WIDE_WIDTH;
					break;
			}
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	var options = ["xmlns=\"http://www.w3.org/2000/svg\"", "viewBox=\"0 0 " + x + " 1\"", "preserveAspectRatio=\"none\""];
	if (width) {
		options.push("width=\"" + width + "\"");
	}
	if (height) {
		options.push("height=\"" + height + "\"");
	}

	return "<svg " + options.join(" ") + ">" + svg + "</svg>";
}

exports.WIDE_SPACE = WIDE_SPACE;
exports.WIDE_BAR = WIDE_BAR;
exports.NARROW_SPACE = NARROW_SPACE;
exports.NARROW_BAR = NARROW_BAR;
exports.encodeCode39 = encodeCode39;
exports.renderBarcodeToHTML = renderBarcodeToHTML;
exports.generateCSS = generateCSS;
exports.renderBarcodeToSVG = renderBarcodeToSVG;

Object.defineProperty(exports, '__esModule', { value: true });

})));
